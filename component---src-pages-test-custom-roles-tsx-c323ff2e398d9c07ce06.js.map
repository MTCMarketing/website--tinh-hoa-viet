{"version":3,"file":"component---src-pages-test-custom-roles-tsx-c323ff2e398d9c07ce06.js","mappings":"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","sources":["webpack:///./src/pages/test/custom-roles.tsx"],"sourcesContent":["\"use client\";\nimport React, { useState } from \"react\";\nimport { supabase } from \"../../database/supabaseClient\";\n\n/**\n * USERS FOR TEST\n */\nconst USERS = [\n  {\n    label: \"member_user1\",\n    email: \"user1@test.com\",\n    password: \"password1\",\n  },\n  {\n    label: \"authenticator\",\n    email: \"authenticator@songvietnam.event\",\n    password: \"3CN29r6NWFczcXk\",\n  },\n] as const;\n\nexport default function CustomRolesTest() {\n  const [log, setLog] = useState<string[]>([]);\n  const append = (msg: string) =>\n    setLog((prev) => [...prev, `[${new Date().toLocaleTimeString()}] ${msg}`]);\n\n  const runTest = async (user: (typeof USERS)[number] | null) => {\n    const actor = user ? user.label : \"public\";\n    append(`\\n=== Testing as ${actor} ===`);\n\n    try {\n      let currentUid: string | null = null;\n      const TARGET_EVENT_ID = \"song-viet-nam\";\n\n      // üîë login or anon\n      if (user) {\n        const { error: loginErr } = await supabase.auth.signInWithPassword({\n          email: user.email,\n          password: user.password,\n        });\n        if (loginErr) {\n          append(`‚ùå Login failed for ${user.email}: ${loginErr.message}`);\n          return;\n        }\n\n        const {\n          data: { user: loggedUser },\n        } = await supabase.auth.getUser();\n        currentUid = loggedUser?.id ?? null;\n\n        append(\n          `‚úÖ Logged in as ${user.email} (uid: ${currentUid ?? \"unknown\"})`\n        );\n      } else {\n        await supabase.auth.signOut();\n        append(\"üë§ Using public (anon) session\");\n      }\n\n      // ===== 1Ô∏è‚É£ READ TEST =====\n      append(`üîç Attempting SELECT * FROM events`);\n      const { data: events, error: readErr } = await supabase\n        .from(\"events\")\n        .select(\"*\");\n\n      if (readErr) {\n        append(`üö´ Read error: ${readErr.message}`);\n      } else {\n        append(\n          `üìñ Read success: ${events?.length ?? 0} rows returned` +\n            (events && events.length > 0\n              ? `\\n   ‚Üí First row sample:\\n${JSON.stringify(\n                  events[0],\n                  null,\n                  2\n                )}`\n              : \"\")\n        );\n      }\n\n      // ===== 2Ô∏è‚É£ WRITE TEST =====\n      const randomEventName = \"Test Event \" + Math.floor(Math.random() * 1000);\n      const newEvent = {\n        event: randomEventName,\n        event_id: TARGET_EVENT_ID,\n        paid: true,\n        used: null,\n        user_id: currentUid,\n      };\n\n      append(\n        `üìù Attempting INSERT into events with data:\\n${JSON.stringify(\n          newEvent,\n          null,\n          2\n        )}`\n      );\n\n      const { data: insertData, error: insertErr } = await supabase\n        .from(\"events\")\n        .insert([newEvent])\n        .select();\n\n      if (insertErr) {\n        if (insertErr.code === \"42501\") {\n          append(\"üö´ Insert blocked by RLS policy (permission denied)\");\n        } else {\n          append(`‚ùå Insert error: ${insertErr.message}`);\n        }\n      } else if (insertData && insertData.length > 0) {\n        append(\n          `‚úÖ Insert success: inserted event_id=${insertData[0].event_id}`\n        );\n      } else {\n        append(\"‚ÑπÔ∏è Insert query ran but returned no data (check policies)\");\n      }\n\n      // ===== 3Ô∏è‚É£ UPDATE TEST =====\n      append(`üîß Attempting UPDATE on events with filters:\n   user_id = ${currentUid}\n   event_id = ${TARGET_EVENT_ID}`);\n\n      const updatePayload = { used: new Date().toISOString() };\n\n      const { data: updatedRows, error: updateErr, status } = await supabase\n        .from(\"events\")\n        .update(updatePayload)\n        .eq(\"user_id\", currentUid)\n        .eq(\"event_id\", TARGET_EVENT_ID)\n        .select();\n\n      const filterInfo = `(event_id: ${TARGET_EVENT_ID}, user_id: ${currentUid})`;\n\n      if (updateErr) {\n        if (updateErr.code === \"42501\") {\n          append(`üö´ Update blocked by RLS policy ${filterInfo}`);\n        } else {\n          append(`‚ùå Update failed: ${updateErr.message} ${filterInfo}`);\n        }\n      } else if (updatedRows && updatedRows.length > 0) {\n        append(\n          `‚úÖ Update success\\n   ‚Üí Updated rows:\\n${JSON.stringify(\n            updatedRows,\n            null,\n            2\n          )}`\n        );\n      } else {\n        append(`‚ÑπÔ∏è Update ran successfully, but no rows matched ${filterInfo}`);\n      }\n\n      await supabase.auth.signOut();\n      append(`--- End test for ${actor} --- ‚úÖ`);\n    } catch (err: any) {\n      append(`‚ùå Unexpected error for ${actor}: ${err.message}`);\n      console.error(err);\n      await supabase.auth.signOut();\n    }\n  };\n\n  return (\n    <div\n      style={{\n        fontFamily: \"monospace\",\n        padding: 20,\n        maxWidth: 900,\n        margin: \"auto\",\n        color: \"white\",\n      }}\n    >\n      <h2>üîí Access Test ‚Äì Events Table (Read/Write Validation)</h2>\n      <div style={{ display: \"flex\", gap: 8, flexWrap: \"wrap\" }}>\n        {USERS.map((u) => (\n          <button\n            key={u.email}\n            onClick={() => runTest(u)}\n            style={{ padding: \"8px 12px\" }}\n          >\n            Test as {u.label}\n          </button>\n        ))}\n        <button onClick={() => runTest(null)} style={{ padding: \"8px 12px\" }}>\n          Test as Public\n        </button>\n      </div>\n\n      <pre\n        style={{\n          background: \"#000\",\n          color: \"#0f0\",\n          padding: 15,\n          borderRadius: 8,\n          marginTop: 20,\n          height: 500,\n          fontSize: 12,\n          overflowY: \"auto\",\n          whiteSpace: \"pre-wrap\",\n        }}\n      >\n        {log.join(\"\\n\")}\n      </pre>\n    </div>\n  );\n}\n"],"names":["USERS","label","email","password","CustomRolesTest","log","setLog","useState","append","msg","prev","Date","toLocaleTimeString","runTest","async","actor","user","currentUid","TARGET_EVENT_ID","error","loginErr","supabase","auth","signInWithPassword","message","data","loggedUser","getUser","id","signOut","events","readErr","from","select","length","JSON","stringify","newEvent","event","Math","floor","random","event_id","paid","used","user_id","insertData","insertErr","insert","code","updatePayload","toISOString","updatedRows","updateErr","status","update","eq","filterInfo","err","console","React","style","fontFamily","padding","maxWidth","margin","color","display","gap","flexWrap","map","u","key","onClick","background","borderRadius","marginTop","height","fontSize","overflowY","whiteSpace","join"],"sourceRoot":""}