{"version":3,"file":"component---src-pages-auth-update-tsx-645989700b23e68032e0.js","mappings":"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","sources":["webpack:///./src/database/functions.ts","webpack:///./src/pages/auth/update.tsx"],"sourcesContent":["import { supabase } from \"./supabaseClient\";\n\n\nexport const handleLogout = async (\n  { onSuccess, onFail }: { onSuccess?: () => void; onFail?: () => void } = {}\n) => {\n  const { error } = await supabase.auth.signOut()\n  if (error) onFail?.()\n  else onSuccess?.()\n}\n\nexport const handleSignup = async ({\n  email,\n  password,\n  fullName,\n  onSuccess,\n  onFail,\n}: {\n  email: string\n  password: string\n  fullName?: string\n  onSuccess?: () => void\n  onFail?: (error?: string) => void\n}) => {\n  const { data, error } = await supabase.auth.signUp({\n    email,\n    password,\n    options: {\n      data: {\n        full_name: fullName || \"unknown\",\n        signup_source: \"thv-web\", // optional\n      },\n    },\n  })\n\n  if (error) onFail?.(error.message)\n  else onSuccess?.()\n}\n\n\nexport const handleLogin = async (\n  { email, password, onSuccess, onFail }: {\n    email: string\n    password: string\n    onSuccess?: () => void\n    onFail?: (error?: string) => void\n  }\n) => {\n  const { data, error } = await supabase.auth.signInWithPassword({ email, password })\n  if (error) onFail?.(error.message)\n  else onSuccess?.()\n}\n\nexport const handleResetPassword = async (\n  { email, onSuccess, onFail }: {\n    email: string\n    onSuccess?: () => void\n    onFail?: (error?: string) => void\n  }\n) => {\n  const { data, error } = await supabase.auth.resetPasswordForEmail(email)\n  if (error) onFail?.(error.message)\n  else onSuccess?.()\n}\n\nexport const handleUpdatePassword = async (\n  { newPassword, onSuccess, onFail }: {\n    newPassword: string\n    onSuccess?: () => void\n    onFail?: (error?: string) => void\n  }\n) => {\n  const { data, error } = await supabase.auth.updateUser({ password: newPassword })\n  if (error) onFail?.(error.message)\n  else onSuccess?.()\n}\n\n\n\nexport interface UpdateUserData {\n  fullName?: string;\n  phone?: string;\n  email?: string;\n  dob?: string;\n  address?: string;\n  hometown?: string;\n  field?: string;\n  goals?: string;\n  vision?: string;\n  status?: string;\n  avatar?: string;\n}\n\n/**\n * Updates user profile data across both tables: user_member & user_private\n * Automatically maps field names to Supabase column names.\n */\nexport const updateUserProfile = async (updates: UpdateUserData) => {\n  try {\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) throw new Error('Not logged in');\n\n    const memberPayload: any = {};\n    const privatePayload: any = {};\n\n    if (updates.fullName) memberPayload.full_name = updates.fullName;\n    if (updates.hometown) memberPayload.hometown = updates.hometown;\n    if (updates.field) memberPayload.field_of_expertise = updates.field;\n    if (updates.status) memberPayload.profile_status = updates.status;\n    if (updates.avatar) memberPayload.avatar_url = updates.avatar;\n\n    if (updates.phone) privatePayload.phone = updates.phone;\n    if (updates.email) privatePayload.email = updates.email;\n    if (updates.address) privatePayload.address = updates.address;\n    if (updates.dob) privatePayload.dob = updates.dob;\n    if (updates.goals) privatePayload.personal_goals = updates.goals;\n    if (updates.vision) privatePayload.future_vision = updates.vision;\n\n    // Run updates separately depending on which data is provided\n    if (Object.keys(memberPayload).length > 0)\n      await supabase.from('user_member').update(memberPayload).eq('id', user.id);\n\n    if (Object.keys(privatePayload).length > 0)\n      await supabase.from('user_private').update(privatePayload).eq('id', user.id);\n\n    return { success: true };\n  } catch (error) {\n    console.error('Update user profile failed:', error);\n    return { success: false, error };\n  }\n};\n","import React, { useState } from \"react\"\nimport { handleUpdatePassword } from \"../../database/functions\"\n\n\nexport default function UpdatePassword() {\n  const [newPassword, setNewPassword] = useState(\"\")\n  const [confirmPassword, setConfirmPassword] = useState(\"\")\n  const [message, setMessage] = useState(\"\")\n\n  const onSuccess = () => setMessage(\"✅ Password updated successfully!\")\n  const onFail = (err?: string) => setMessage(\"❌ \" + (err || \"Password update failed.\"))\n\n  const handleSubmit = (e: any) => {\n    e.preventDefault()\n    if (newPassword !== confirmPassword) {\n      setMessage(\"❌ Passwords do not match.\")\n      return\n    }\n    handleUpdatePassword({ newPassword, onSuccess, onFail })\n  }\n\n  return (\n    <div style={{ fontFamily: \"sans-serif\", textAlign: \"center\", marginTop: \"15vh\", color: \"#0a0a0a\" }}>\n      <h1>Tinh Hoa Việt Password Reset</h1>\n      <p style={{ marginBottom: \"2rem\" }}>Enter your new password below to complete the reset process.</p>\n\n      <form\n        onSubmit={handleSubmit}\n        style={{ display: \"flex\", flexDirection: \"column\", gap: \"10px\", maxWidth: \"320px\", margin: \"0 auto\" }}\n      >\n        <input\n          type=\"password\"\n          placeholder=\"New password\"\n          value={newPassword}\n          onChange={(e) => setNewPassword(e.target.value)}\n          style={{ padding: \"10px\", border: \"1px solid #ccc\", borderRadius: \"5px\" }}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Confirm password\"\n          value={confirmPassword}\n          onChange={(e) => setConfirmPassword(e.target.value)}\n          style={{ padding: \"10px\", border: \"1px solid #ccc\", borderRadius: \"5px\" }}\n        />\n        <button\n          type=\"submit\"\n          style={{\n            padding: \"10px\",\n            background: \"#2E7D32\",\n            color: \"#fff\",\n            border: \"none\",\n            borderRadius: \"5px\",\n            cursor: \"pointer\",\n          }}\n        >\n          Update Password\n        </button>\n      </form>\n\n      {message && <p style={{ marginTop: \"1.5rem\", fontSize: \"1rem\", color: \"#333\" }}>{message}</p>}\n    </div>\n  )\n}\n"],"names":["handleLogout","async","onSuccess","onFail","error","supabase","auth","signOut","handleSignup","email","password","fullName","data","signUp","options","full_name","signup_source","message","handleLogin","signInWithPassword","handleResetPassword","resetPasswordForEmail","handleUpdatePassword","newPassword","updateUser","UpdatePassword","setNewPassword","useState","confirmPassword","setConfirmPassword","setMessage","err","React","style","fontFamily","textAlign","marginTop","color","marginBottom","onSubmit","e","preventDefault","display","flexDirection","gap","maxWidth","margin","type","placeholder","value","onChange","target","padding","border","borderRadius","background","cursor","fontSize"],"sourceRoot":""}