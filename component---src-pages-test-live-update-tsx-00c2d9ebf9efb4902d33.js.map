{"version":3,"file":"component---src-pages-test-live-update-tsx-00c2d9ebf9efb4902d33.js","mappings":"yKAKe,SAASA,IACtB,MAAM,EAACC,EAAI,EAAEC,IAAWC,EAAAA,EAAAA,UAAc,OAChC,EAACC,EAAG,EAAEC,IAAUF,EAAAA,EAAAA,UAAmB,IACnCG,GAASC,EAAAA,EAAAA,QAA8B,MAEvCC,EAAUC,IACdJ,EAAQK,GAAI,kBAASA,GAAI,MAAM,IAAIC,MAAOC,qBAAoB,KAAKH,OAIrEI,EAAAA,EAAAA,WAAU,KACJP,EAAOQ,UACTR,EAAOQ,QAAQC,UAAYT,EAAOQ,QAAQE,eAE3C,CAACZ,KAGJS,EAAAA,EAAAA,WAAU,KACRL,EAAO,sCAEPS,EAAAA,GAASC,KAAKC,UAAUC,KAAKC,IAAc,UAAb,KAAEC,GAAM,EACpC,MAAMC,EAAwB,QAAb,EAAGD,aAAI,EAAJA,EAAMrB,YAAI,QAAI,KAClCC,EAAQqB,GAENf,EADEe,EACK,kBAAkBA,EAAYC,MAAK,KAAKD,EAAYE,GAAE,IAEtD,yBAIX,MAAMC,EAAUT,EAAAA,GACbS,QAAQ,mBACRC,GACC,mBACA,CAAEC,MAAO,SAAUC,OAAQ,SAAUC,MAAO,YAC3CC,IACC,IACEvB,EAAO,yBAAyBuB,EAAQC,IAAIC,YAC5CzB,EAAO,eAAe0B,KAAKC,UAAUJ,EAAQC,IAAID,QAAS,KAAM,GAClE,CAAE,MAAOK,GACP5B,EAAO,mDACT,IAGH6B,UAAWC,GAAW9B,EAAO,sBAAsB8B,IAEtD,MAAO,KACL9B,EAAO,uBACPS,EAAAA,GAASsB,cAAcb,KAExB,IA6BH,OACEc,EAAAA,cAAAA,MAAAA,CACEC,MAAO,CACLC,WAAY,YACZC,QAAS,GACTC,SAAU,IACVC,OAAQ,SACRC,MAAO,UAGTN,EAAAA,cAAAA,KAAAA,KAAI,2BAEHvC,EACCuC,EAAAA,cAAAA,IAAAA,KAAG,kBACe,IAChBA,EAAAA,cAAAA,OAAAA,CAAMC,MAAO,CAAEK,MAAO,SACnB7C,EAAKuB,OAAS,UAAU,KAAGvB,EAAKwB,GAAG,MAIxCe,EAAAA,cAAAA,IAAAA,KAAG,mBAGLA,EAAAA,cAAAA,MAAAA,CAAKC,MAAO,CAAEM,QAAS,OAAQC,IAAK,OAAQC,aAAc,SACxDT,EAAAA,cAAAA,SAAAA,CACEU,QAnDgBC,UACtB,IAAKlD,EAEH,YADAO,EAAO,qCAITA,EAAO,iDACP,MAAM,MAAE4C,SAAgBnC,EAAAA,GAASoC,KAAK,YAAYC,OAAO,CACvD,CACEC,QAAStD,EAAKwB,GACdQ,WAAY,wBACZF,QAAS,CACPsB,KAAMpD,EAAKuB,MACXgC,aAAcC,KAAKC,MAAsB,IAAhBD,KAAKE,UAC9BC,KAAM,kCAMVpD,EADE4C,EACK,oBAAoBA,EAAMS,QAE1B,4DA8BHpB,MAAO,CACLE,QAAS,WACTmB,WAAY,OACZhB,MAAO,OACPiB,OAAQ,OACRC,aAAc,EACdC,OAAQ,UACRC,WAAY,SAEf,yBAKH1B,EAAAA,cAAAA,MAAAA,CACE2B,IAAK7D,EACLmC,MAAO,CACLqB,WAAY,OACZhB,MAAO,OACPH,QAAS,GACTqB,aAAc,EACdI,UAAW,GACXC,OAAQ,IACRC,SAAU,GACVC,UAAW,OACXC,WAAY,aAGbpE,EAAIqE,KAAK,OAIlB,C","sources":["webpack:///./src/pages/test/live-update.tsx"],"sourcesContent":["// src/pages/RealtimeTest.tsx\n\"use client\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { supabase } from \"../../database/supabaseClient\";\n\nexport default function RealtimeTest() {\n  const [user, setUser] = useState<any>(null);\n  const [log, setLog] = useState<string[]>([]);\n  const logRef = useRef<HTMLPreElement | null>(null);\n\n  const append = (msg: string) => {\n    setLog((prev) => [...prev, `[${new Date().toLocaleTimeString()}] ${msg}`]);\n  };\n\n  // Auto-scroll to bottom on new log entries\n  useEffect(() => {\n    if (logRef.current) {\n      logRef.current.scrollTop = logRef.current.scrollHeight;\n    }\n  }, [log]);\n\n  // Subscribe to realtime messages\n  useEffect(() => {\n    append(\"üëÇ Setting up realtime listener...\");\n\n    supabase.auth.getUser().then(({ data }) => {\n      const currentUser = data?.user ?? null;\n      setUser(currentUser);\n      if (currentUser) {\n        append(`‚úÖ Logged in as ${currentUser.email} (${currentUser.id})`);\n      } else {\n        append(\"‚ùå No user logged in\");\n      }\n    });\n\n    const channel = supabase\n      .channel(\"public:messages\")\n      .on(\n        \"postgres_changes\",\n        { event: \"INSERT\", schema: \"public\", table: \"messages\" },\n        (payload) => {\n          try {\n            append(`üí¨ New message event: ${payload.new.event_type}`);\n            append(`üì¶ Payload: ${JSON.stringify(payload.new.payload, null, 2)}`);\n          } catch (err) {\n            append(\"‚ö†Ô∏è Received event, but failed to format payload.\");\n          }\n        }\n      )\n      .subscribe((status) => append(`üì° Channel status: ${status}`));\n\n    return () => {\n      append(\"üßπ Unsubscribing...\");\n      supabase.removeChannel(channel);\n    };\n  }, []);\n\n  // Send a message row (triggers realtime)\n  const sendTestMessage = async () => {\n    if (!user) {\n      append(\"‚ùå Cannot send: no logged-in user.\");\n      return;\n    }\n\n    append(\"üöÄ Inserting new test message via Supabase...\");\n    const { error } = await supabase.from(\"messages\").insert([\n      {\n        user_id: user.id,\n        event_type: \"test_realtime_message\",\n        payload: {\n          from: user.email,\n          random_value: Math.floor(Math.random() * 10000),\n          note: \"Hello from RealtimeTest UI!\",\n        },\n      },\n    ]);\n\n    if (error) {\n      append(`‚ùå Insert failed: ${error.message}`);\n    } else {\n      append(\"‚úÖ Insert request sent. Waiting for realtime callback...\");\n    }\n  };\n\n  return (\n    <div\n      style={{\n        fontFamily: \"monospace\",\n        padding: 20,\n        maxWidth: 900,\n        margin: \"0 auto\",\n        color: \"white\",\n      }}\n    >\n      <h2>‚ö° Realtime Test Console</h2>\n\n      {user ? (\n        <p>\n          ‚úÖ Logged in as:{\" \"}\n          <span style={{ color: \"#0f0\" }}>\n            {user.email || \"unknown\"} ({user.id})\n          </span>\n        </p>\n      ) : (\n        <p>‚ùå Not logged in</p>\n      )}\n\n      <div style={{ display: \"flex\", gap: \"10px\", marginBottom: \"10px\" }}>\n        <button\n          onClick={sendTestMessage}\n          style={{\n            padding: \"8px 14px\",\n            background: \"#0f0\",\n            color: \"#000\",\n            border: \"none\",\n            borderRadius: 6,\n            cursor: \"pointer\",\n            fontWeight: \"bold\",\n          }}\n        >\n          üì® Send Test Message\n        </button>\n      </div>\n\n      <pre\n        ref={logRef}\n        style={{\n          background: \"#000\",\n          color: \"#0f0\",\n          padding: 15,\n          borderRadius: 8,\n          marginTop: 20,\n          height: 500,\n          fontSize: 12,\n          overflowY: \"auto\",\n          whiteSpace: \"pre-wrap\",\n        }}\n      >\n        {log.join(\"\\n\")}\n      </pre>\n    </div>\n  );\n}\n"],"names":["RealtimeTest","user","setUser","useState","log","setLog","logRef","useRef","append","msg","prev","Date","toLocaleTimeString","useEffect","current","scrollTop","scrollHeight","supabase","auth","getUser","then","_ref","data","currentUser","email","id","channel","on","event","schema","table","payload","new","event_type","JSON","stringify","err","subscribe","status","removeChannel","React","style","fontFamily","padding","maxWidth","margin","color","display","gap","marginBottom","onClick","async","error","from","insert","user_id","random_value","Math","floor","random","note","message","background","border","borderRadius","cursor","fontWeight","ref","marginTop","height","fontSize","overflowY","whiteSpace","join"],"sourceRoot":""}