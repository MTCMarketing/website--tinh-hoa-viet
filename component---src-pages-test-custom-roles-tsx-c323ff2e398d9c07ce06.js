"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9165],{7965:function(e,t,n){n.r(t),n.d(t,{default:function(){return o}});var a=n(4506),s=n(6540),i=n(6898);const r=[{label:"member_user1",email:"user1@test.com",password:"password1"},{label:"authenticator",email:"authenticator@songvietnam.event",password:"3CN29r6NWFczcXk"}];function o(){const{0:e,1:t}=(0,s.useState)([]),n=e=>t(t=>[].concat((0,a.A)(t),["["+(new Date).toLocaleTimeString()+"] "+e])),o=async e=>{const t=e?e.label:"public";n("\n=== Testing as "+t+" ===");try{let o=null;const l="song-viet-nam";if(e){var a,s;const{error:t}=await i.ND.auth.signInWithPassword({email:e.email,password:e.password});if(t)return void n("❌ Login failed for "+e.email+": "+t.message);const{data:{user:r}}=await i.ND.auth.getUser();o=null!==(a=null==r?void 0:r.id)&&void 0!==a?a:null,n("✅ Logged in as "+e.email+" (uid: "+(null!==(s=o)&&void 0!==s?s:"unknown")+")")}else await i.ND.auth.signOut(),n("👤 Using public (anon) session");n("🔍 Attempting SELECT * FROM events");const{data:d,error:c}=await i.ND.from("events").select("*");var r;if(c)n("🚫 Read error: "+c.message);else n("📖 Read success: "+(null!==(r=null==d?void 0:d.length)&&void 0!==r?r:0)+" rows returned"+(d&&d.length>0?"\n   → First row sample:\n"+JSON.stringify(d[0],null,2):""));const u={event:"Test Event "+Math.floor(1e3*Math.random()),event_id:l,paid:!0,used:null,user_id:o};n("📝 Attempting INSERT into events with data:\n"+JSON.stringify(u,null,2));const{data:p,error:m}=await i.ND.from("events").insert([u]).select();m?"42501"===m.code?n("🚫 Insert blocked by RLS policy (permission denied)"):n("❌ Insert error: "+m.message):p&&p.length>0?n("✅ Insert success: inserted event_id="+p[0].event_id):n("ℹ️ Insert query ran but returned no data (check policies)"),n("🔧 Attempting UPDATE on events with filters:\n   user_id = "+o+"\n   event_id = "+l);const g={used:(new Date).toISOString()},{data:v,error:w,status:f}=await i.ND.from("events").update(g).eq("user_id",o).eq("event_id",l).select(),h="(event_id: "+l+", user_id: "+o+")";w?"42501"===w.code?n("🚫 Update blocked by RLS policy "+h):n("❌ Update failed: "+w.message+" "+h):v&&v.length>0?n("✅ Update success\n   → Updated rows:\n"+JSON.stringify(v,null,2)):n("ℹ️ Update ran successfully, but no rows matched "+h),await i.ND.auth.signOut(),n("--- End test for "+t+" --- ✅")}catch(o){n("❌ Unexpected error for "+t+": "+o.message),console.error(o),await i.ND.auth.signOut()}};return s.createElement("div",{style:{fontFamily:"monospace",padding:20,maxWidth:900,margin:"auto",color:"white"}},s.createElement("h2",null,"🔒 Access Test – Events Table (Read/Write Validation)"),s.createElement("div",{style:{display:"flex",gap:8,flexWrap:"wrap"}},r.map(e=>s.createElement("button",{key:e.email,onClick:()=>o(e),style:{padding:"8px 12px"}},"Test as ",e.label)),s.createElement("button",{onClick:()=>o(null),style:{padding:"8px 12px"}},"Test as Public")),s.createElement("pre",{style:{background:"#000",color:"#0f0",padding:15,borderRadius:8,marginTop:20,height:500,fontSize:12,overflowY:"auto",whiteSpace:"pre-wrap"}},e.join("\n")))}}}]);
//# sourceMappingURL=component---src-pages-test-custom-roles-tsx-c323ff2e398d9c07ce06.js.map