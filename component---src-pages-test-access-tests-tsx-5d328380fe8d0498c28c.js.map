{"version":3,"file":"component---src-pages-test-access-tests-tsx-5d328380fe8d0498c28c.js","mappings":"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","sources":["webpack:///./src/pages/test/access-tests.tsx"],"sourcesContent":["\"use client\";\nimport React, { useState } from \"react\";\nimport { supabase } from \"../../database/supabaseClient\";\n\nconst USERS = [\n  {\n    label: \"user1\",\n    id: \"f2d40632-3610-4039-ac46-9dda9b672497\",\n    email: \"user1@test.com\",\n    password: \"password1\",\n  },\n  {\n    label: \"user2\",\n    id: \"e04e38e0-7eed-4281-bc05-89fb6c9b30f1\",\n    email: \"user2@test.com\",\n    password: \"password1\",\n  },\n  {\n    label: \"user3\",\n    id: \"387899c3-fa8a-4582-b6dc-0833dfc02f40\",\n    email: \"user3@test.com\",\n    password: \"password1\",\n  },\n] as const;\n\nconst MEMBER_FIELDS = [\n  \"full_name\",\n  \"hometown\",\n  \"membership_level\",\n  \"profile_status\",\n  \"title\",\n  \"field_of_expertise\",\n] as const;\n\nconst PRIVATE_FIELDS = [\"email\", \"phone\", \"address\", \"profile_progress\"] as const;\n\nexport default function AccessTests() {\n  const [log, setLog] = useState<string[]>([]);\n  const append = (msg: string) =>\n    setLog((prev) => [...prev, `[${new Date().toLocaleTimeString()}] ${msg}`]);\n\n  const runTest = async (user: (typeof USERS)[number] | null) => {\n    const actor = user ? user.label : \"public\";\n    append(`\\n=== Testing as ${actor} ===`);\n    try {\n      // Login or logout depending on test user\n      if (user) {\n        const { error: loginErr } = await supabase.auth.signInWithPassword({\n          email: user.email,\n          password: user.password,\n        });\n        if (loginErr) {\n          append(`‚ùå Login failed for ${user.email}: ${loginErr.message}`);\n          return;\n        }\n        append(`‚úÖ Logged in as ${user.email}`);\n      } else {\n        await supabase.auth.signOut();\n        append(\"üë§ Using public (anon) session\");\n      }\n\n      // Query both tables\n      const { data: memberData, error: memberErr } = await supabase\n        .from(\"user_member\")\n        .select(\"*\");\n      const { data: privateData, error: privateErr } = await supabase\n        .from(\"user_private\")\n        .select(\"*\");\n\n      console.group(`üìä Data for ${actor}`);\n      console.log(\"üë• user_member:\", memberData ?? memberErr);\n      console.log(\"üîê user_private:\", privateData ?? privateErr);\n      console.groupEnd();\n\n      if (memberErr) append(`üö´ user_member error: ${memberErr.message}`);\n      if (privateErr) append(`üö´ user_private error: ${privateErr.message}`);\n\n      const memberRows = memberData ?? [];\n      const privateRows = privateData ?? [];\n\n      // Evaluate access for each target user\n      USERS.forEach((target, i) => {\n        if (i > 0) append(\"\\n\"); // spacing between users\n\n        const memberRow = memberRows.find((r: any) => r.id === target.id) ?? {};\n        const privateRow = privateRows.find((r: any) => r.id === target.id) ?? {};\n\n        MEMBER_FIELDS.forEach((field) => {\n          const value = (memberRow as any)[field];\n          if (value !== undefined && value !== null) {\n            append(\n              `${actor} was allowed access to ${target.label} member-field ${field} (${value})`\n            );\n          } else {\n            append(\n              `${actor} was NOT allowed access to ${target.label} member-field ${field} (unknown)`\n            );\n          }\n        });\n\n        PRIVATE_FIELDS.forEach((field) => {\n          const value = (privateRow as any)[field];\n          if (value !== undefined && value !== null) {\n            append(\n              `${actor} was allowed access to ${target.label} private-field ${field} (${value})`\n            );\n          } else {\n            append(\n              `${actor} was NOT allowed access to ${target.label} private-field ${field} (unknown)`\n            );\n          }\n        });\n      });\n\n      await supabase.auth.signOut();\n      append(`--- End test for ${actor} --- ‚úÖ`);\n    } catch (err: any) {\n      append(`‚ùå Unexpected error during ${actor} test: ${err.message}`);\n      console.error(err);\n      await supabase.auth.signOut();\n    }\n  };\n\n  return (\n    <div\n      style={{\n        fontFamily: \"monospace\",\n        padding: 20,\n        maxWidth: 900,\n        margin: \"auto\",\n        color: \"white\",\n      }}\n    >\n      <h2>üîí Access Control / Split-Table (Members vs Private)</h2>\n      <div style={{ display: \"flex\", gap: 8, flexWrap: \"wrap\" }}>\n        {USERS.map((u) => (\n          <button\n            key={u.email}\n            onClick={() => runTest(u)}\n            style={{ padding: \"8px 12px\" }}\n          >\n            Test as {u.label}\n          </button>\n        ))}\n        <button\n          onClick={() => runTest(null)}\n          style={{ padding: \"8px 12px\" }}\n        >\n          Test as Public\n        </button>\n      </div>\n\n      <pre\n        style={{\n          background: \"#000\",\n          color: \"#0f0\",\n          padding: 15,\n          borderRadius: 8,\n          marginTop: 20,\n          height: 500,\n          fontSize: 12,\n          overflowY: \"auto\",\n          whiteSpace: \"pre-wrap\",\n        }}\n      >\n        {log.join(\"\\n\")}\n      </pre>\n    </div>\n  );\n}\n"],"names":["USERS","label","id","email","password","MEMBER_FIELDS","PRIVATE_FIELDS","AccessTests","log","setLog","useState","append","msg","prev","Date","toLocaleTimeString","runTest","async","actor","user","error","loginErr","supabase","auth","signInWithPassword","message","signOut","data","memberData","memberErr","from","select","privateData","privateErr","console","group","groupEnd","memberRows","privateRows","forEach","target","i","memberRow","find","r","privateRow","field","value","err","React","style","fontFamily","padding","maxWidth","margin","color","display","gap","flexWrap","map","u","key","onClick","background","borderRadius","marginTop","height","fontSize","overflowY","whiteSpace","join"],"sourceRoot":""}