{"version":3,"file":"component---src-pages-test-logout-tsx-fc9224fb3080aaf3e537.js","mappings":"wOAGO,MAAMA,EAAeC,eAAA,GAEtB,IADJ,UAAEC,EAAS,OAAEC,QAAyD,MAAG,CAAC,EAAC,EAE3E,MAAM,MAAEC,SAAgBC,EAAAA,GAASC,KAAKC,UAClCH,EAAOD,SAAAA,IACND,SAAAA,GACP,EAEaM,EAAeP,UAYrB,IAZ4B,MACjCQ,EAAK,SACLC,EAAQ,SACRC,EAAQ,UACRT,EAAS,OACTC,GAOD,EACC,MAAM,KAAES,EAAI,MAAER,SAAgBC,EAAAA,GAASC,KAAKO,OAAO,CACjDJ,QACAC,WACAI,QAAS,CACPF,KAAM,CACJG,UAAWJ,GAAY,UACvBK,cAAe,cAKjBZ,EAAOD,SAAAA,EAASC,EAAMa,SACrBf,SAAAA,KAIMgB,EAAcjB,UAOrB,IANJ,MAAEQ,EAAK,SAAEC,EAAQ,UAAER,EAAS,OAAEC,GAK7B,EAED,MAAM,KAAES,EAAI,MAAER,SAAgBC,EAAAA,GAASC,KAAKa,mBAAmB,CAAEV,QAAOC,aACpEN,EAAOD,SAAAA,EAASC,EAAMa,SACrBf,SAAAA,KAGMkB,EAAsBnB,UAM7B,IALJ,MAAEQ,EAAK,UAAEP,EAAS,OAAEC,GAInB,EAED,MAAM,KAAES,EAAI,MAAER,SAAgBC,EAAAA,GAASC,KAAKe,sBAAsBZ,GAC9DL,EAAOD,SAAAA,EAASC,EAAMa,SACrBf,SAAAA,KAGMoB,EAAuBrB,UAM9B,IALJ,YAAEsB,EAAW,UAAErB,EAAS,OAAEC,GAIzB,EAED,MAAM,KAAES,EAAI,MAAER,SAAgBC,EAAAA,GAASC,KAAKkB,WAAW,CAAEd,SAAUa,IAC/DnB,EAAOD,SAAAA,EAASC,EAAMa,SACrBf,SAAAA,I,sDCvEP,cAAqBuB,EAAAA,cAACC,EAAAA,EAAM,K,wDCE5B,MAAMC,EAAO,CACXC,GAAI,CACFC,WAAY,gBACZC,QAAS,uDACTC,WAAY,8BACZC,QAAS,2CACTC,KAAM,sCAERC,GAAI,CACFL,WAAY,gBACZC,QAAS,kDACTC,WAAY,4BACZC,QAAS,iCACTC,KAAM,4CA4CV,IAxCyBP,KACvB,MAAM,EAACS,EAAO,EAACC,IAAaC,EAAAA,EAAAA,UAASV,EAAKC,GAAGG,aACvC,EAACO,IAAYD,EAAAA,EAAAA,UAAsB,MACnCE,EAAIZ,EAAKW,GAgBf,OAdAE,EAAAA,EAAAA,WAAU,MAWRxC,EAAAA,EAAAA,IAAa,CAAEE,UAVGA,KAChBkC,EAAUG,EAAEP,SACZS,WAAW,KAAMC,EAAAA,EAAAA,UAAS,KAAM,OAQRvC,OALXA,KACbiC,EAAUG,EAAEN,UAKb,CAACM,EAAEP,QAASO,EAAEN,OAGfR,EAAAA,cAAAA,MAAAA,CAAKkB,UAAU,cACblB,EAAAA,cAAAA,QAAAA,CAAOkB,UAAU,aAAa,kBAC5BlB,EAAAA,cAAAA,MAAAA,CAAKkB,UAAU,gBACflB,EAAAA,cAAAA,MAAAA,CAAKkB,UAAU,kBACflB,EAAAA,cAAAA,MAAAA,CAAKkB,UAAU,cACblB,EAAAA,cAAAA,KAAAA,CAAIkB,UAAU,cAAcJ,EAAEV,YAC9BJ,EAAAA,cAAAA,IAAAA,CAAGkB,UAAU,aAAaJ,EAAET,WAIhCL,EAAAA,cAAAA,OAAAA,CAAMkB,UAAU,aACdlB,EAAAA,cAAAA,MAAAA,CAAKkB,UAAU,iBACblB,EAAAA,cAAAA,MAAAA,CAAKkB,UAAU,YACflB,EAAAA,cAAAA,IAAAA,CAAGkB,UAAU,gBAAgBR,M","sources":["webpack:///./src/database/functions.ts","webpack:///./src/pages/test/logout.tsx","webpack:///./src/componets/auth/Logout/Logout.tsx"],"sourcesContent":["import { supabase } from \"./supabaseClient\";\n\n\nexport const handleLogout = async (\n  { onSuccess, onFail }: { onSuccess?: () => void; onFail?: () => void } = {}\n) => {\n  const { error } = await supabase.auth.signOut()\n  if (error) onFail?.()\n  else onSuccess?.()\n}\n\nexport const handleSignup = async ({\n  email,\n  password,\n  fullName,\n  onSuccess,\n  onFail,\n}: {\n  email: string\n  password: string\n  fullName?: string\n  onSuccess?: () => void\n  onFail?: (error?: string) => void\n}) => {\n  const { data, error } = await supabase.auth.signUp({\n    email,\n    password,\n    options: {\n      data: {\n        full_name: fullName || \"unknown\",\n        signup_source: \"thv-web\", // optional\n      },\n    },\n  })\n\n  if (error) onFail?.(error.message)\n  else onSuccess?.()\n}\n\n\nexport const handleLogin = async (\n  { email, password, onSuccess, onFail }: {\n    email: string\n    password: string\n    onSuccess?: () => void\n    onFail?: (error?: string) => void\n  }\n) => {\n  const { data, error } = await supabase.auth.signInWithPassword({ email, password })\n  if (error) onFail?.(error.message)\n  else onSuccess?.()\n}\n\nexport const handleResetPassword = async (\n  { email, onSuccess, onFail }: {\n    email: string\n    onSuccess?: () => void\n    onFail?: (error?: string) => void\n  }\n) => {\n  const { data, error } = await supabase.auth.resetPasswordForEmail(email)\n  if (error) onFail?.(error.message)\n  else onSuccess?.()\n}\n\nexport const handleUpdatePassword = async (\n  { newPassword, onSuccess, onFail }: {\n    newPassword: string\n    onSuccess?: () => void\n    onFail?: (error?: string) => void\n  }\n) => {\n  const { data, error } = await supabase.auth.updateUser({ password: newPassword })\n  if (error) onFail?.(error.message)\n  else onSuccess?.()\n}\n\n\n\nexport interface UpdateUserData {\n  fullName?: string;\n  phone?: string;\n  email?: string;\n  dob?: string;\n  address?: string;\n  hometown?: string;\n  field?: string;\n  goals?: string;\n  vision?: string;\n  status?: string;\n  avatar?: string;\n}\n\n/**\n * Updates user profile data across both tables: user_member & user_private\n * Automatically maps field names to Supabase column names.\n */\nexport const updateUserProfile = async (updates: UpdateUserData) => {\n  try {\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) throw new Error('Not logged in');\n\n    const memberPayload: any = {};\n    const privatePayload: any = {};\n\n    if (updates.fullName) memberPayload.full_name = updates.fullName;\n    if (updates.hometown) memberPayload.hometown = updates.hometown;\n    if (updates.field) memberPayload.field_of_expertise = updates.field;\n    if (updates.status) memberPayload.profile_status = updates.status;\n    if (updates.avatar) memberPayload.avatar_url = updates.avatar;\n\n    if (updates.phone) privatePayload.phone = updates.phone;\n    if (updates.email) privatePayload.email = updates.email;\n    if (updates.address) privatePayload.address = updates.address;\n    if (updates.dob) privatePayload.dob = updates.dob;\n    if (updates.goals) privatePayload.personal_goals = updates.goals;\n    if (updates.vision) privatePayload.future_vision = updates.vision;\n\n    // Run updates separately depending on which data is provided\n    if (Object.keys(memberPayload).length > 0)\n      await supabase.from('user_member').update(memberPayload).eq('id', user.id);\n\n    if (Object.keys(privatePayload).length > 0)\n      await supabase.from('user_private').update(privatePayload).eq('id', user.id);\n\n    return { success: true };\n  } catch (error) {\n    console.error('Update user profile failed:', error);\n    return { success: false, error };\n  }\n};\n","import React from \"react\";\nimport Logout from \"../../componets/auth/Logout/Logout\";\n\nexport default () => <Logout/>","import React, { useEffect, useState } from \"react\";\nimport { navigate } from \"gatsby\";\nimport \"../../shared/ProtectedRoute/protected.css\"; // reuse same branded layout\nimport { handleLogout } from \"../../../database/functions\";\n\nconst i18n = {\n  EN: {\n    brandTitle: \"TINH HOA VIỆT\",\n    tagline: \"Where Vietnamese Excellence Meets Global Recognition\",\n    loggingOut: \"Logging you out securely...\",\n    success: \"✅ You have been logged out successfully.\",\n    fail: \"❌ Logout failed. Please try again.\",\n  },\n  VN: {\n    brandTitle: \"TINH HOA VIỆT\",\n    tagline: \"Nơi tôn vinh tinh hoa Việt Nam vươn tầm quốc tế\",\n    loggingOut: \"Đang đăng xuất an toàn...\",\n    success: \"✅ Bạn đã đăng xuất thành công.\",\n    fail: \"❌ Đăng xuất thất bại. Vui lòng thử lại.\",\n  },\n};\n\nconst Logout: React.FC = () => {\n  const [status, setStatus] = useState(i18n.EN.loggingOut);\n  const [language] = useState<\"EN\" | \"VN\">(\"EN\"); // optional toggle if needed\n  const t = i18n[language];\n\n  useEffect(() => {\n    const onSuccess = () => {\n      setStatus(t.success);\n      setTimeout(() => navigate(\"/\"), 1500);\n    };\n\n    const onFail = () => {\n      setStatus(t.fail);\n    };\n\n    // Run logout immediately\n    handleLogout({ onSuccess, onFail });\n  }, [t.success, t.fail]);\n\n  return (\n    <div className=\"auth-shell\">\n      <aside className=\"brand-side\" aria-hidden>\n        <div className=\"brand-sheen\" />\n        <div className=\"brand-pattern\" />\n        <div className=\"brand-wrap\">\n          <h1 className=\"brand-name\">{t.brandTitle}</h1>\n          <p className=\"brand-tag\">{t.tagline}</p>\n        </div>\n      </aside>\n\n      <main className=\"form-side\">\n        <div className=\"loading-block\">\n          <div className=\"spinner\" />\n          <p className=\"loading-text\">{status}</p>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default Logout;\n"],"names":["handleLogout","async","onSuccess","onFail","error","supabase","auth","signOut","handleSignup","email","password","fullName","data","signUp","options","full_name","signup_source","message","handleLogin","signInWithPassword","handleResetPassword","resetPasswordForEmail","handleUpdatePassword","newPassword","updateUser","React","Logout","i18n","EN","brandTitle","tagline","loggingOut","success","fail","VN","status","setStatus","useState","language","t","useEffect","setTimeout","navigate","className"],"sourceRoot":""}